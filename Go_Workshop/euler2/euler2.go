/*

Each new term in the Fibonacci sequence is generated by adding the previous two
terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.


Answer: 4613732
*/
package main

import "fmt"

// fibs return a channel of all fibonacci numbers
func fibs() chan int {
	ch := make(chan int)
	go func() {
		a, b := 1, 2
		for {
			ch <- a
			a, b = b, a+b
		}
	}()
	return ch
}

// upto return a channel with all items in `in` that are <= `n`
// e.g. upto([1,2,3,4,5], 3) will return [1,2,3]
func upto(in chan int, n int) chan int {
	ch := make(chan int)
	go func() {
		for i := range in {
			if i > n {
				close(ch)
				return
			}
			ch <- i
		}
	}()
	return ch
}

// evens return chanel with only the even numbers in `in`
func evens(in chan int) chan int {
	ch := make(chan int)
	go func() {
		for i := range in {
			if i%2 == 0 {
				ch <- i
			}
		}
	}()
	return ch
}

func main() {
	sum := 0
	// This will deadlock
	//for n := range evens(upto(fibs(), 4000000)) {
	for n := range upto(evens(fibs()), 4000000) {
		sum += n
	}
	fmt.Println(sum)
}
